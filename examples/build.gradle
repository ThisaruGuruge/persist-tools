/*
 * Copyright (c) 2023, WSO2 LLC. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'

description = 'Ballerina - Persist Examples'

def ballerinaDist = "${project.buildDir}/ballerina-distribution"
def examples = ["medical-center", "rainier"]
def introspectionExamples = ["hospital", "hospital_unsupported"]
def redisDBExamples = ["social_media", "redis_cache"]
def mockExamples = ["hospital_mock"]

configurations {
    balTools
    dist {
        transitive true
    }
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}")
            }
            copy {
                from(project.zipTree(artifact.getFile())) {
                    eachFile { fcd ->
                        fcd.relativePath = new RelativePath(!fcd.file.isDirectory(), fcd.relativePath.segments.drop(1))
                    }
                    includeEmptyDirs = false
                }
                into "${project.buildDir}/ballerina-distribution"
            }
        }
    }
    outputs.dir ballerinaDist
}

task unpackStdLibs() {
    println("Unpacking standard libraries")
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs() {
    dependsOn(unpackStdLibs)
    println("Copying standard libraries to the distribution")
    /* Standard Libraries */
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            def artifactExtractedPath = "${project.buildDir}/extracted-stdlibs/" + artifact.name + "-zip"
            copy {
                into ballerinaDist
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
            copy {
                def runtimePath = "${project.buildDir}/ballerina-distribution"
                into runtimePath
                into("repo/bala") {
                    from "${artifactExtractedPath}/bala"
                }
                into("repo/cache") {
                    from "${artifactExtractedPath}/cache"
                }
            }
        }
    }
}

task copyPersistTool() {
    dependsOn(copyStdlibs)
    doLast() {
        copy {
            into "$project.buildDir"
            into("ballerina-distribution/bre/lib") {
                from "$project.rootDir/persist-cli/build/libs/persist-cli-${project.version}.jar"
            }
        }
    }
}

task copyTestResources() {
    doLast() {
        copy {
            examples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
        copy {
            introspectionExamples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
        copy {
            redisDBExamples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
        copy {
            mockExamples.each { example ->
                into buildDir
                into("generated-examples/${example}/") {
                    from "${example}"
                }
            }
        }
    }

}

task initDbExamples {
    doLast {
        examples.each { example ->
            if (example != "gsheet_automation") {
                try {
                    exec {
                        copy {
                            from(file("${project.projectDir}/build/generated-examples/${example}/resources/mysql"))
                            into("${project.projectDir}/build/generated-examples/${example}")
                        }
                        delete "${project.projectDir}/build/generated-examples/${example}/generated"
                        delete "${project.projectDir}/build/generated-examples/${example}/modules"
                        workingDir "${project.projectDir}/build/generated-examples/${example}"
                        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                            commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist add --module=entities --datastore=mysql"
                        } else {
                            commandLine 'cmd', 'slmgr /dlv'
                            println('\n' + "Windows Instance detected")
                        }
                    }
                } catch (Exception e) {
                    println("Example '${example}' Generation failed: " + e.message)
                    throw e
                }
            }
        }
    }
}

task generateDbExamples {
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal build"
                    } else {
                        commandLine 'cmd', 'slmgr /dlv'
                        println('\n' + "Windows Instance detected")
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateInMemoryExamples {
    doLast {
        examples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=inmemory --module=entities"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=inmemory --module=entities"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateIntrospectionExamples {
    doLast {
        introspectionExamples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=mysql --module=entities"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=mysql --module=entities"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateRedisDBExamples {
    doLast {
        redisDBExamples.each { example ->
            try {
                exec {
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=redis --module=entities"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=redis --module=entities"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateDBMockExamples {
    doLast {
        mockExamples.each { example ->
            try {
                exec {
                    copy {
                        from(file("${project.projectDir}/build/generated-examples/${example}/resources/mysql"))
                        into("${project.projectDir}/build/generated-examples/${example}/tests")
                    }
                    delete "${project.projectDir}/build/generated-examples/${example}/modules"
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=mysql --module=entities --test-datastore=h2"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=mysql --module=entities --test-datastore=h2"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

task generateRedisMockExamples {
    doLast {
        mockExamples.each { example ->
            try {
                exec {
                    copy {
                        from(file("${project.projectDir}/build/generated-examples/${example}/resources/redis"))
                        into("${project.projectDir}/build/generated-examples/${example}/tests")
                    }
                    delete "${project.projectDir}/build/generated-examples/${example}/modules"
                    workingDir "${project.projectDir}/build/generated-examples/${example}"
                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist generate --datastore=redis --module=entities --test-datastore=inmemory"
                    } else {
                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat persist generate --datastore=redis --module=entities --test-datastore=inmemory"
                    }
                }
            } catch (Exception e) {
                println("Example '${example}' Generation failed: " + e.message)
                throw e
            }
        }
    }
}

def checkTestDockerContainerStatus(dockerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c',
                        "docker exec ${dockerName} mysqladmin ping -hlocalhost -uroot -pTest123# --silent"
            }.exitValue
        } catch (all) {
            return 1
        }
    } else {
        commandLine 'cmd','slmgr /dlv'
        println('\n' + "Windows Instance detected")
    }
}

def checkExecResult(executionResult, failText, standardOutput) {
    if (executionResult) {
        Provider<ExecResult> execResultProvider = executionResult.getProvider()
        int exitCode = execResultProvider.get().getExitValue()
        if (exitCode != 0) {
            throw new GradleException('Non-zero exit value: ' + exitCode)
        }
        if (standardOutput.toString().contains(failText)) {
            throw new GradleException('"' + failText + '" string in output: ' + standardOutput.toString())
        }
    } else {
        throw new GradleException('Returned a null execResult object')
    }
}

def checkRedisTestDockerContainerStatus(containerName) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        try {
            return exec {
                commandLine 'sh', '-c', "docker exec ${containerName} redis-cli"
            }.exitValue
        } catch (all) {
            return 1;
        }
    } else {
        commandLine 'cmd','slmgr /dlv'
        println('\n' + "Windows Instance detected")
    }
}

task startTestDockerContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', 'docker run --platform linux/amd64 --rm -d --name ballerina-persist-tools-example -e MYSQL_ROOT_PASSWORD="Test123#" -e MYSQL_DATABASE="hospital" -p 3308:3306 -t mysql:8.0.21'
        def healthCheck = 1
        def counter = 0
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(30 * 1000)
                healthCheck = checkTestDockerContainerStatus('ballerina-persist-tools-example')
                counter = counter + 1
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'ballerina-mysql' health test exceeded timeout!")
            }
        }
    } else {
        commandLine 'cmd','slmgr /dlv'
        println('\n' + "Windows Instance detected")
        println('\n' + "skippped starting the docker container")
    }
}

task startTestRedisContainer(type: Exec) {
    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        def standardOutput = new ByteArrayOutputStream()
        commandLine 'sh', '-c', 'docker run --platform linux/amd64 --rm -d --name persist-redis -p 6379:6379 redis:latest'
        def healthCheck = 1
        def counter = 0
        doLast {
            checkExecResult(executionResult, 'Error', standardOutput)
            while (healthCheck != 0 && counter < 12) {
                sleep(30 * 1000)
                healthCheck = checkRedisTestDockerContainerStatus('persist-redis')
                counter = counter + 1
            }
            if (healthCheck != 0) {
                throw new GradleException("Docker container 'persist-redis' health test exceeded timeout!")
            }
        }
    } else {
        commandLine 'cmd','slmgr /dlv'
        println('\n' + "Windows Instance detected")
        println('\n' + "skippped starting the docker container")
    }
}

task stopTestDockerContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', 'docker stop ballerina-persist-tools-example'
                    standardOutput = stdOut
                }
            } catch (all) {
                println('Gradle process can safely ignore stopTestDockerContainer task')
            }
        }
    }
}

task stopTestRedisContainer() {
    doLast {
        if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
            try {
                def stdOut = new ByteArrayOutputStream()
                exec {
                    commandLine 'sh', '-c', 'docker stop persist-redis'
                    standardOutput = stdOut
                }
            } catch (all) {
                println('Gradle process can safely ignore stopTestRedisContainer task')
            }
        }
    }
}
//
//task pushExamples {
//    dependsOn(startTestDockerContainer)
//    doLast {
//        examples.each { example ->
//            try {
//                exec {
//                    workingDir "${project.projectDir}/build/generated-examples/${example}"
//                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal persist push"
//                    } else {
//                        commandLine 'cmd','slmgr /dlv'
//                        println('\n' + "Windows Instance detected")
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' Generation failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}
//
//task testDbExamples {
//    doLast {
//        examples.each { example ->
//            try {
//                exec {
//                    workingDir "${project.projectDir}/build/generated-examples/${example}"
//                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal run --offline"
//                    } else {
//                        commandLine 'cmd','slmgr /dlv'
//                        println('\n' + "Windows Instance detected")
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' test failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}
//
//task testInMemoryExamples {
//    doLast {
//        examples.each { example ->
//            try {
//                exec {
//                    workingDir "${project.projectDir}/build/generated-examples/${example}"
//                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal run --offline"
//                    } else {
//                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat run --offline"
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' test failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}
//
//task testIntrospectionExamples {
//    dependsOn(startTestDockerContainer)
//    doLast {
//        introspectionExamples.each { example ->
//            try {
//                if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                    exec {
//                        workingDir "${project.projectDir}/build/generated-examples/${example}"
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal test"
//                    }
//                } else {
//                    exec {
//                        workingDir "${project.projectDir}/build/generated-examples/${example}"
//                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat test"
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' Tests failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}
//
//task testRedisDBExamples {
//    dependsOn(startTestRedisContainer)
//    doLast {
//        redisDBExamples.each { example ->
//            try {
//                exec {
//                    workingDir "${project.projectDir}/build/generated-examples/${example}"
//                    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal test"
//                    } else {
//                        commandLine 'cmd','slmgr /dlv'
//                        println('\n' + "Windows Instance detected")
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' test failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}
//
//task testDBMockExamples {
//        doLast {
//            mockExamples.each { example ->
//            try {
//                if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                    exec {
//                        workingDir "${project.projectDir}/build/generated-examples/${example}"
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal test"
//                    }
//                } else {
//                    exec {
//                        workingDir "${project.projectDir}/build/generated-examples/${example}"
//                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat test"
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' Tests failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}
//
//task testRedisMockExamples {
//    doLast {
//        mockExamples.each { example ->
//            try {
//                if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
//                    exec {
//                        workingDir "${project.projectDir}/build/generated-examples/${example}"
//                        commandLine 'sh', '-c', "${ballerinaDist}/bin/bal test"
//                    }
//                } else {
//                    exec {
//                        workingDir "${project.projectDir}/build/generated-examples/${example}"
//                        commandLine 'cmd', '/c', "${ballerinaDist}/bin/bal.bat test"
//                    }
//                }
//            } catch (Exception e) {
//                println("Example '${example}' Tests failed: " + e.message)
//                throw e
//            }
//        }
//    }
//}

copyPersistTool.dependsOn ":persist-cli-tests:build"
copyPersistTool.dependsOn ":persist-cli:build"
copyTestResources.dependsOn copyPersistTool

//generateIntrospectionExamples.dependsOn copyTestResources
//generateRedisDBExamples.dependsOn copyTestResources
//generateInMemoryExamples.dependsOn copyTestResources
//generateDBMockExamples.dependsOn copyTestResources
//testInMemoryExamples.dependsOn generateInMemoryExamples

//initDbExamples.dependsOn testInMemoryExamples
//generateDbExamples.dependsOn initDbExamples
//pushExamples.dependsOn generateDbExamples
//testDbExamples.dependsOn pushExamples
//testIntrospectionExamples.dependsOn generateIntrospectionExamples
//testRedisDBExamples.dependsOn generateRedisDBExamples
//testDBMockExamples.dependsOn generateDBMockExamples
//generateRedisMockExamples.dependsOn testDBMockExamples
//testRedisMockExamples.dependsOn generateRedisMockExamples

//build.dependsOn testInMemoryExamples
//build.dependsOn testDbExamples
//build.dependsOn testIntrospectionExamples
//build.dependsOn testRedisDBExamples
//build.dependsOn testDBMockExamples
//build.dependsOn testRedisMockExamples
build.finalizedBy stopTestDockerContainer
build.finalizedBy stopTestRedisContainer
